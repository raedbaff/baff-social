// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  password String
  username  String
  bio   String?
  links Link[]
  role  Role @default(USER)
  photo String?
  messages Message[]
  directMessages Message[] @relation("DirectMessages")
  files   MessageFile[]
  groupChats GroupChat[] @relation("GroupChatUsers")
}
model Message {
  id        Int      @default(autoincrement()) @id
  content   String
  files     MessageFile[]
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  receiverId Int?
  receiver  User?    @relation("DirectMessages", fields: [receiverId], references: [id])
  groupChatId Int?
  groupChat GroupChat? @relation(fields: [groupChatId], references: [id])
}
model MessageFile {
  id        Int      @default(autoincrement()) @id
  url       String
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  messageId Int?
  message   Message? @relation(fields: [messageId], references: [id])
}
model GroupChat {
  id        Int      @default(autoincrement()) @id
  name      String
  createdAt DateTime @default(now())
  users     User[]   @relation("GroupChatUsers")
  messages  Message[]
}

model Link {
  id     Int    @default(autoincrement()) @id
  url    String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}